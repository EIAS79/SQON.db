*STRICT=FALSE

@schema
!# The schema defines the types and structures for each field in the data.
!# When STRICT=FALSE, fields can have more flexible types (e.g., RandomValue can be one of multiple types).
name -> String   
!# The "name" field is expected to be a string.

age -> Number    
!# The "age" field must be a number.

nullValue -> Null  
!# "nullValue" explicitly accepts `null` as a valid value.

booleanValue -> Boolean  
!# "booleanValue" accepts only `true` or `false`.

DateValue -> Date  
!# "DateValue" should be in a valid Date format (e.g., ISO 8601).

undefinedValue -> undefined  
!# "undefinedValue" accepts the `undefined` type explicitly.

RandomValue -> Any  
!# "RandomValue" accepts any type, providing maximum flexibility.

BinaryValue -> Binary  
!# "BinaryValue" is for storing raw binary data, often used for file data or encrypted information.

RandomValue -> String | Number | Boolean | Date | undefined | Any | Binary | Null  
!# "RandomValue" can accept any of these types, offering high flexibility in the schema.

StringArrayValue -> StringArray  
!# "StringArrayValue" is an array where each element must be a string.

NumberArrayValue -> NumberArray  
!# "NumberArrayValue" is an array where each element must be a number.

ObjectArrayValue -> ObjectArray  
!# "ObjectArrayValue" is an array that can contain objects. Each object inside the array can have its own schema, i.e., a unique structure defined for it.
!# This means that within "ObjectArrayValue", you can specify complex data structures, including nested fields, and validate the individual properties of objects within the array.

ObjectValue -> Object {  
  !# "ObjectValue" is an object with its own set of fields inside. The fields inside the object can have their own specific data types, validations, and defaults.
  !# Here, we define that the "ObjectValue" consists of one field, "name", which is of type String.
  name -> String  
  !# The "name" field inside the object is a required string, meaning each object inside the "ObjectArrayValue" array must have a "name" field.
} 

url -> String

email -> String

binaryData -> Date

ipAddress -> String

@end

@validations

name -> required=true; minLength=3; isUnique=true; isAlpha=true; trim=true; lowercase=true
  !# Ensures that 'name' field is required, has a minimum length of 3, is unique, contains only alphabetic characters, is trimmed (no leading/trailing spaces), and is converted to lowercase.
  
age -> required=true; max=70; min=8; isPositive=true; isInteger=true; notNull=true
  !# Ensures that 'age' is required, must be between 8 and 70, is a positive integer, and is not null.

NumberArrayValue -> maxLength=4; minLength=1; isUnique=true; max=100; min=5; isPositive=true; isNumeric=true; enum=[5,10,20,50]
  !# Ensures 'NumberArrayValue' is an array with a length between 1 and 4, all values are unique, numbers between 5 and 100, and must be numeric and part of a specified enum.

StringArrayValue -> maxLength=4; minLength=1; isUnique=true; isAlphanumeric=true; pattern="^[A-Za-z0-9]+$"
  !# Ensures 'StringArrayValue' is an array with a length between 1 and 4, contains unique alphanumeric strings, and matches the specified pattern.

ObjectValue -> maxLength=4; hasProperties=["name", "value"]; notNull=true
  !# Ensures that 'ObjectValue' is an object with a maximum of 4 properties, must have 'name' and 'value' properties, and cannot be null.

ObjectValue.name -> required=true; minLength=3; maxLength=50; pattern="^[A-Za-z]+$"; isAlpha=true; trim=true
  !# Ensures 'ObjectValue.name' is required, has a length between 3 and 50 characters, contains only alphabetic characters, matches the specified pattern, and is trimmed.

ObjectArrayValue -> required=true; maxLength=10; minLength=2; hasProperties=["name", "type"]; isUnique=true
  !# Ensures 'ObjectArrayValue' is an array with a minimum length of 2 and maximum length of 10, each object has 'name' and 'type' properties, and the objects are unique in the array.

DateValue -> isDate=true; minDate="2023-01-01"; maxDate="2025-12-31"
  !# Ensures 'DateValue' is a valid date, within the range from January 1, 2023, to December 31, 2025.

booleanValue -> isBoolean=true
  !# Ensures 'booleanValue' is a valid boolean (true or false).

url -> isURL=true
  !# Ensures 'url' is a valid URL format.

email -> isEmail=true
  !# Ensures 'email' is a valid email address format.

ipAddress -> isIP=true
  !# Ensures 'ipAddress' is a valid IP address.

@end


@records
#0 -> name("Anas"); age(25); nullValue(NULL); booleanValue(TRUE); DateValue(1993-05-20T00:00:00Z); undefinedValue();
 BinaryValue(<Buffer 21 231 21 13 56>); RandomValue(21); StringArrayValue[ _0("String 1"); _1("String 2"); _2("String 3"); ];
 NumberArrayValue[ 
  _0(1); _1(21); _2(32);
  ];
  ObjectArrayValue[ 
    _0{ name("Joe"); };
    _1{ name("Elias"); };
  ];
    tt[ 
    _0{ name("Joe"); };
    _1(23);
    _2{ name("Elias"); };
    _3[ _0(1); _1("random value"); ];
  ];
  ObjectValue{ name("Ali"); };
#1 -> name("Anas"); age(25); nullValue(NULL); booleanValue(TRUE); DateValue(1993-05-20T00:00:00Z); undefinedValue(); BinaryValue(<Buffer 21 231 21 13 56>); RandomValue(21); StringArrayValue[ _0("String 1"); _1("String 2"); _2("String 3"); ]; NumberArrayValue[ _0(1); _1(21); _2(32); ]; ObjectArrayValue[ _0{ name("Joe"); }; _1{ name("Elias"); }; ]; ObjectValue{ name("Ali"); };
@end
